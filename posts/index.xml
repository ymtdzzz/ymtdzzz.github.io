<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on VIVOLOG</title>
    <link>https://www.zeroclock.dev/posts/</link>
    <description>Recent content in Posts on VIVOLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2020 zeroclock</copyright>
    <lastBuildDate>Fri, 30 Oct 2020 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.zeroclock.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Rust】as_bytes()でcannot borrow as mutable(E0596)エラー</title>
      <link>https://www.zeroclock.dev/posts/2020/10/rust-array-from-as-bytes-mutable-error/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/10/rust-array-from-as-bytes-mutable-error/</guid>
      <description>&lt;h2 id=&#34;cannot-borrow-data-in-a-and-reference-as-mutable&#34;&gt;cannot borrow data in a `&amp;amp;` reference as mutable&lt;/h2&gt;
&lt;p&gt;共通鍵関連で、DES暗号化をRustで実装しているんですが、そのときにちょっとハマりかけたのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lambciとimg2lambdaとserverlessでLambdaのデプロイフローを構築する</title>
      <link>https://www.zeroclock.dev/posts/2020/09/deploy-lambda-with-lambci-img2lambda-serverless/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/09/deploy-lambda-with-lambci-img2lambda-serverless/</guid>
      <description>&lt;h2 id=&#34;lambdaのローカル環境&#34;&gt;Lambdaのローカル環境&lt;/h2&gt;
&lt;p&gt;これまでLambdaを構築する際には、ソースコードを決め打ちで書いてzipで上げたり、コンソール上のエディタでポチポチ開発していたりしてました。&lt;/p&gt;
&lt;p&gt;PythonとかNodejsとかなら、それでも簡単なAPIくらいなら作れるのですが、ちょっと複雑なことになったり、PHPみたいにCustom Runtimeを使いたい場合とかは、何度もデプロイし直してトライアンドエラーするのは効率が悪いです。&lt;/p&gt;
&lt;p&gt;やっぱり、他のソースと同じようにローカルでガリガリ書いて、コマンドで自動デプロイができた方が良いので色々探したところ、Lambciとimg2lambda（あとserverless）を使ったフローが良さそうだったので紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Typescript】axiosのレスポンスはきちんと型チェックしよう</title>
      <link>https://www.zeroclock.dev/posts/2020/08/type-checking-the-response-via-axios/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/08/type-checking-the-response-via-axios/</guid>
      <description>&lt;h2 id=&#34;axiosでエラー&#34;&gt;Axiosでエラー&lt;/h2&gt;
&lt;p&gt;Axiosで外部APIを叩いてデータを取得したいと思い、下記のコードを書いたとします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EmacsのLSP-modeの動作を軽くする</title>
      <link>https://www.zeroclock.dev/posts/2020/07/emacs-lsp-mode-more-faster/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/07/emacs-lsp-mode-more-faster/</guid>
      <description>&lt;p&gt;EmacsのLSP-modeは非常に快適で、言語サポートの追加も簡単にできるので重宝しているのですが、動作がカクついたりしてストレスになる場合がありました。&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/performance/&#34;&gt;ドキュメント&lt;/a&gt;を確認したところ、パフォーマンスチューニングの方法があったのでまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goのhot reloadにgo-taskを使ってみる</title>
      <link>https://www.zeroclock.dev/posts/2020/07/using-ga-task-to-host-reload/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/07/using-ga-task-to-host-reload/</guid>
      <description>&lt;h2 id=&#34;goでhot-reloading&#34;&gt;Goでhot reloading&lt;/h2&gt;
&lt;p&gt;作っているアプリのサーバサイドをGOで書いているので、&lt;a href=&#34;https://github.com/oxequa/realize&#34;&gt;Realize&lt;/a&gt;でhot reloadを実現しようと思ったのですが、 &lt;code&gt;GO111MODULE=off&lt;/code&gt; にしないとgo getできなかったり、いざdocker-composeで &lt;code&gt;realize start --run&lt;/code&gt; しようとすると下記のようなエラーが出たりと色々あれだったので、他に使えそうなパッケージが無いか探してみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Electron の CORS ブロックを回避する方法について</title>
      <link>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</link>
      <pubDate>Sat, 06 Jun 2020 11:59:01 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</guid>
      <description>&lt;h2 id=&#34;electron-で-cors-エラー&#34;&gt;Electron で CORS エラー&lt;/h2&gt;
&lt;p&gt;Electron の Render プロセスでクロスオリジンのリクエストを投げた際、通常の Web と同様 CORS エラーでブロックされます。通信先が自前の API サーバだったりした場合にはそちらの設定で&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;を許可すれば OK です。&lt;/p&gt;
&lt;p&gt;この制約はセキュリティ上必要なものですが、どうしてもクロスオリジンのリクエストを投げたい場合もあるかと思います。私の場合は、ある markdow エディタに、貼り付けた URL から自動的にページのタイトルを fetch して挿入する機能を実装するときに遭遇しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust で Webassembly を書いて、Typescript で React を書くための環境構築</title>
      <link>https://www.zeroclock.dev/posts/2020/05/rust-webassembly-react-ts/</link>
      <pubDate>Thu, 28 May 2020 07:55:17 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/rust-webassembly-react-ts/</guid>
      <description>&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;p&gt;この記事では、Rust(cargo)と npm は導入済みを前提としています。
知識的には&lt;a href=&#34;https://rustwasm.github.io/docs/book/&#34;&gt;Rust の公式 WebAssembly チュートリアル&lt;/a&gt;を一通り読んだくらいで、今回は Wasm と React どう組み合わせるのよってところを重点的に。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>画像の diff を生成する rust ライブラリを書いた</title>
      <link>https://www.zeroclock.dev/posts/2020/05/image-diff-rust-crate/</link>
      <pubDate>Mon, 25 May 2020 23:48:26 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/image-diff-rust-crate/</guid>
      <description>&lt;h2 id=&#34;rust-で画像の比較画像を生成&#34;&gt;Rust で画像の比較画像を生成&lt;/h2&gt;
&lt;p&gt;個人的に今取り組んでいるプロジェクトで、画像の差分を取得する必要があったのですが、いまいちそれっぽいライブラリが見つかりませんでした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/lcs-image-diff&#34;&gt;lcs-image-diff&lt;/a&gt;もありましたが、ちょっとイメージと違う。&lt;/p&gt;
&lt;p&gt;イメージ的にはこう、差分があるピクセルだけピンポイントで検出してほしい。&lt;/p&gt;
&lt;p&gt;元画像を比較画像で減算して、その後元画像を加算する感じかな。&lt;/p&gt;
&lt;h2 id=&#34;ライブラリ作成&#34;&gt;ライブラリ作成&lt;/h2&gt;
&lt;p&gt;ということで、ライブラリを作成しました。依存ライブラリとして画像処理ライブラリの&lt;a href=&#34;https://crates.io/crates/image&#34;&gt;image&lt;/a&gt;を使用しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Storybook に noarmalize.css を適用する</title>
      <link>https://www.zeroclock.dev/posts/2020/05/import-normalize-css-to-storybook/</link>
      <pubDate>Thu, 14 May 2020 22:40:11 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/import-normalize-css-to-storybook/</guid>
      <description>Storybook に normalize.css を適用する .storybook/config.jsに下記の通り import 文を記述します。
import &amp;#39;!style-loader!css-loader!sass-loader!../src/styles/normalize.css&amp;#39;; 現場からは以上です！！</description>
    </item>
    
    <item>
      <title>Emacs で deno のコード補完を有効化する</title>
      <link>https://www.zeroclock.dev/posts/2020/05/enable-deno-autocompletion-emacs/</link>
      <pubDate>Sun, 10 May 2020 12:30:33 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/enable-deno-autocompletion-emacs/</guid>
      <description>&lt;h2 id=&#34;emacs-で-deno&#34;&gt;Emacs で Deno&lt;/h2&gt;
&lt;p&gt;最近 Rust で色々 CLI ツールを作って遊んでいるのですが、そのつながりで Rust で書かれた javascript ランタイムである&lt;a href=&#34;https://github.com/denoland/deno&#34;&gt;Deno&lt;/a&gt;の Getting started をちまちまやっていました。&lt;/p&gt;
&lt;p&gt;言語は Typescript なので Emacs の&lt;a href=&#34;https://github.com/ananthakumaran/tide&#34;&gt;Tide&lt;/a&gt;でコード自動補完を有効化していたのですが、Deno での import 方法が対応していません。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;serve&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://deno.land/std@v0.42.0/http/server.ts&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// ↑ここで [An import path cannot end with a &amp;#39;. ts&amp;#39;extension.]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// もちろんインポートしたモジュールの自動補完も不可。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tsconfigts-の編集で解決&#34;&gt;tsconfig.ts の編集で解決&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Flutterが最新iOS(13.3.1)のiPhone実機でコケる問題</title>
      <link>https://www.zeroclock.dev/posts/2020/03/flutter-error-in-ios-13-3-1/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/03/flutter-error-in-ios-13-3-1/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;ビルドして実機で確認しようとすると、スプラッシュ画面で下記のようなエラーが発生してコケる問題に遭遇した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FlutterにおけるBLoCパターンについて</title>
      <link>https://www.zeroclock.dev/posts/2020/02/2020-02-24-bloc-pattern-flutter/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/02/2020-02-24-bloc-pattern-flutter/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;モバイルアプリで作りたいものがあり、只今技術選定中。せっかくなのでモダンなフレームワークを使いたいと考えていたところ、Flutterが今盛り上がっているっぽいので色々チュートリアルを読みながら勉強した。&lt;/p&gt;
&lt;p&gt;今回は、色々チュートリアル巡りをしていて、業務レベルのアプリを作るときにも使えそうなBLoCパターンをまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Github CLIのbeta版を試す</title>
      <link>https://www.zeroclock.dev/posts/2020/02/2020-02-24-try-github-cli-beta/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/02/2020-02-24-try-github-cli-beta/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;先日、githubの公式CLIツールがbeta版としてリリースされた。&lt;/p&gt;
&lt;p&gt;githubはGUIでしか基本使わなかったので当然CLIもあるものと勝手に考えていたが、これまでGithubのCLIは「Hub」という非公式ツールがデファクトになっていたらしい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/01/08/2019-01-07-github-free-users-now-get-unlimited-private-repositories/&#34;&gt;いつの間にかGithub無料ユーザでもプライベートリポジトリの作成が無料になっていた&lt;/a&gt;ので、最近はBitbucketからGithubに徐々に移行しつつある。せっかくなのでCLIもざっと触ってみたいと思う。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS CodeDeployのHookスクリプトでソースを弄りたいとき</title>
      <link>https://www.zeroclock.dev/posts/2020/02/2020-02-11-codedeploy-hook-script/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/02/2020-02-11-codedeploy-hook-script/</guid>
      <description>&lt;h2 id=&#34;hookスクリプトの実行場所&#34;&gt;Hookスクリプトの実行場所&lt;/h2&gt;
&lt;p&gt;CodeDeployでソースをデプロイするときには、appspec.ymlでソースと実行するHookスクリプトを指定する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>はじめてのOSS contribute</title>
      <link>https://www.zeroclock.dev/posts/2020/02/2020-02-11-first-oss-contribute/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/02/2020-02-11-first-oss-contribute/</guid>
      <description>&lt;p&gt;最近、長らく使っていたエンジニア向けノートアプリ「Boostnote」がリニューアルされた。それによってリポジトリも新しくなったみたいで、ソースコードもほぼ別物になったっぽい。実際に使ってみると色々バグも多くて、これはプルリクチャンスか？と思い、解決できるissueが無いか探してみた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery読み込み前にjQueryを書きたい</title>
      <link>https://www.zeroclock.dev/posts/2020/01/use-jquery-before-loading-jquery/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/01/use-jquery-before-loading-jquery/</guid>
      <description>&lt;h2 id=&#34;事象&#34;&gt;事象&lt;/h2&gt;
&lt;p&gt;テンプレートエンジンを使用したWebアプリケーションの構築を複数人でやっていると、大体骨組みはリードエンジニアが作成して、そこにincludeするviewを各エンジニアが作成するという流れを採用すると思う。&lt;/p&gt;
&lt;p&gt;各開発者が作成するviewも雛形があって、「ここにjavascriptを書いてね」とか「ここにスタイルを書いてね」とか、そういう指定がある。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MacだけでWindows10のインストールメディア（USB）を作成する</title>
      <link>https://www.zeroclock.dev/posts/2020/01/windows10-bootable-usb-only-mac/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/01/windows10-bootable-usb-only-mac/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;いや、もちろんWindowsで作成するのが一番手っ取り早いんだけども、どうしてもMacを使わなざるを得ない状況に陥ってしまったので。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebBundlesことはじめ</title>
      <link>https://www.zeroclock.dev/posts/2020/01/webbundles-tutorial/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/01/webbundles-tutorial/</guid>
      <description>&lt;h2 id=&#34;webbundles概要&#34;&gt;WebBundles概要&lt;/h2&gt;
&lt;p&gt;WebBundlesとは、Webコンテンツ（HTML/css/js…）を単一のファイルにまとめる技術。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【AWS】CodePipelineでEC2への最低限の自動デプロイ環境を整備する</title>
      <link>https://www.zeroclock.dev/posts/2019/12/codepipeline-ec2-deploy/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/12/codepipeline-ec2-deploy/</guid>
      <description>&lt;h2 id=&#34;codepipelineを用いたec2への自動デプロイ&#34;&gt;CodePipelineを用いたEC2への自動デプロイ&lt;/h2&gt;
&lt;p&gt;AWSには様々なデプロイ手法が存在する。CodeDeployを使用すればEC2,Lambda,Fargateに自動デプロイ（もちろん手動も）できる他、CodeBuildを利用すればS3へのアップロード、CloudFrontのキャッシュ削除（Invalidation）も勝手にやってくれたり。&lt;/p&gt;
&lt;p&gt;CloudFormationを使用してLambdaにデプロイする方法についても今度詳しく記事を書きたいと思っているが、今回は前回の記事でも触れたEC2への自動deployについて紹介する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【AWS】CodeBuildでPHP Unitを流すためのDockerfile</title>
      <link>https://www.zeroclock.dev/posts/2019/12/codebuild-phpunit-dockerfile/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/12/codebuild-phpunit-dockerfile/</guid>
      <description>&lt;h2 id=&#34;codebuildでユニットテストを流したい&#34;&gt;CodeBuildでユニットテストを流したい&lt;/h2&gt;
&lt;p&gt;半年前くらいにAWSのCodeBuildで「Gitから引っ張ってきたソースでPHPUnitを動かしたいんだけど」と言われたので作成したdockerfileを一部修正して紹介する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MKCertで手軽にローカル開発環境をSSL化する</title>
      <link>https://www.zeroclock.dev/posts/2019/12/ssl-dev-with-mkcert/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/12/ssl-dev-with-mkcert/</guid>
      <description>&lt;h2 id=&#34;ローカルのssl化&#34;&gt;ローカルのSSL化&lt;/h2&gt;
&lt;p&gt;普段開発をしていると、ローカル開発環境はSSLを使用せずに構築することが結構ある。環境変数でSSLの使用不使用を振り分ける処理は、できれば無い方がいいのはたしか。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SPA（Vuejs）でwordpressテーマを作成した</title>
      <link>https://www.zeroclock.dev/posts/2019/12/vuejs-wordpress-theme/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/12/vuejs-wordpress-theme/</guid>
      <description>&lt;h2 id=&#34;vuejsでwordpressテーマ作成&#34;&gt;Vue.jsでwordpressテーマ作成&lt;/h2&gt;
&lt;p&gt;2019/12/16に、このブログのテーマをリニューアルした。&lt;/p&gt;
&lt;p&gt;今回はSPAに挑戦したかったので、Vue.jsを採用してだいたい２週間ほどで完成までこぎつけることができた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CORS対応】Lambdaで動くLaravelの静的ファイルをCloudFrontで配信する</title>
      <link>https://www.zeroclock.dev/posts/2019/09/lambda-static-via-cloudfront/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/09/lambda-static-via-cloudfront/</guid>
      <description>&lt;h2 id=&#34;静的ファイルをキャッシュしたい&#34;&gt;&lt;strong&gt;静的ファイルをキャッシュしたい&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;前回の記事ではLambda上にLaravelを構築しました。&lt;/p&gt;
&lt;p&gt;とりあえず動くは動くんですが、Lambda上で全てのファイルをいちいち読み込んでいるので、容量が大きいファイルをやりとりするサービスではパフォーマンス面で不安が残ります。&lt;/p&gt;
&lt;p&gt;そのため、今回の記事では静的ファイル（publicフォルダ配下）をS3に配置し、Cloudfrontで高速に配信できるようにしたいと思います。また、キャッシュサーバから受信したCSS等から別サーバのリソースを読み込むことを考慮し、CORS設定も行っていきたいと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LambdaでLaravelを動かす(SAM使用)</title>
      <link>https://www.zeroclock.dev/posts/2019/09/laravel-on-lambda/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/09/laravel-on-lambda/</guid>
      <description>&lt;h2 id=&#34;laravel-in-lambda&#34;&gt;&lt;strong&gt;Laravel in Lambda&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;最近Lambda環境でLaravelを動かす機会がありました。&lt;/p&gt;
&lt;p&gt;LaravelはPHPのフレームワークなので、基本的にはPHP用のカスタムランタイムを適用してソースファイルをまるごとアップロードすれば動きます。&lt;/p&gt;
&lt;p&gt;ただ、手動でzipで固めてアップロードして…というのもなんかあれなので、今回はCloudformationの拡張であるServerless Application Model(SAM)を使用してデプロイまでやってみたいと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Swift5.0】ESTabBarControllerでタブをカスタマイズする</title>
      <link>https://www.zeroclock.dev/posts/2019/09/estabbarcontroller-swift-5-0/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/09/estabbarcontroller-swift-5-0/</guid>
      <description>&lt;h2 id=&#34;タブをカスタマイズしたい&#34;&gt;&lt;strong&gt;タブをカスタマイズしたい&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;最近はSwiftでアプリを作っています（プライベートで）。&lt;/p&gt;
&lt;p&gt;タブをちょいおしゃれな感じにしたいなーと思って色々ライブラリを漁っていたところ、「&lt;a href=&#34;https://github.com/eggswift/ESTabBarController&#34;&gt;ESTabBarController&lt;/a&gt;」っていうライブラリがなんだか良さげだったのでテストがてら触ってみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【ActiveAdmin】showのデフォルトaction itemsを消去する</title>
      <link>https://www.zeroclock.dev/posts/2019/01/active-admin-action-items/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/01/active-admin-action-items/</guid>
      <description>&lt;p&gt;Qiitaに投稿した記事になりますので、こちらにも展開しておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【対処法】vbguest実行時のrepository not found</title>
      <link>https://www.zeroclock.dev/posts/2019/01/vagrant-vbguest-error/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/01/vagrant-vbguest-error/</guid>
      <description>&lt;p&gt;Qiitaに投稿した記事をこちらにも展開します。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>