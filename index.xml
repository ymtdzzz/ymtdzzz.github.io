<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VIVOLOG</title>
    <link>https://www.zeroclock.dev/</link>
    <description>Recent content on VIVOLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2020 zeroclock</copyright>
    <lastBuildDate>Sun, 10 May 2020 14:24:25 +0900</lastBuildDate>
    
	<atom:link href="https://www.zeroclock.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lambciとimg2lambdaとserverlessでLambdaのデプロイフローを構築する</title>
      <link>https://www.zeroclock.dev/posts/2020/09/deploy-lambda-with-lambci-img2lambda-serverless/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/09/deploy-lambda-with-lambci-img2lambda-serverless/</guid>
      <description>&lt;h2 id=&#34;lambdaのローカル環境&#34;&gt;Lambdaのローカル環境&lt;/h2&gt;
&lt;p&gt;これまでLambdaを構築する際には、ソースコードを決め打ちで書いてzipで上げたり、コンソール上のエディタでポチポチ開発していたりしてました。&lt;/p&gt;
&lt;p&gt;PythonとかNodejsとかなら、それでも簡単なAPIくらいなら作れるのですが、ちょっと複雑なことになったり、PHPみたいにCustom Runtimeを使いたい場合とかは、何度もデプロイし直してトライアンドエラーするのは効率が悪いです。&lt;/p&gt;
&lt;p&gt;やっぱり、他のソースと同じようにローカルでガリガリ書いて、コマンドで自動デプロイができた方が良いので色々探したところ、Lambciとimg2lambda（あとserverless）を使ったフローが良さそうだったので紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Typescript】axiosのレスポンスはきちんと型チェックしよう</title>
      <link>https://www.zeroclock.dev/posts/2020/08/type-checking-the-response-via-axios/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/08/type-checking-the-response-via-axios/</guid>
      <description>&lt;h2 id=&#34;axiosでエラー&#34;&gt;Axiosでエラー&lt;/h2&gt;
&lt;p&gt;Axiosで外部APIを叩いてデータを取得したいと思い、下記のコードを書いたとします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EmacsのLSP-modeの動作を軽くする</title>
      <link>https://www.zeroclock.dev/posts/2020/07/emacs-lsp-mode-more-faster/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/07/emacs-lsp-mode-more-faster/</guid>
      <description>&lt;p&gt;EmacsのLSP-modeは非常に快適で、言語サポートの追加も簡単にできるので重宝しているのですが、動作がカクついたりしてストレスになる場合がありました。&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/performance/&#34;&gt;ドキュメント&lt;/a&gt;を確認したところ、パフォーマンスチューニングの方法があったのでまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goのhot reloadにgo-taskを使ってみる</title>
      <link>https://www.zeroclock.dev/posts/2020/07/using-ga-task-to-host-reload/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/07/using-ga-task-to-host-reload/</guid>
      <description>&lt;h2 id=&#34;goでhot-reloading&#34;&gt;Goでhot reloading&lt;/h2&gt;
&lt;p&gt;作っているアプリのサーバサイドをGOで書いているので、&lt;a href=&#34;https://github.com/oxequa/realize&#34;&gt;Realize&lt;/a&gt;でhot reloadを実現しようと思ったのですが、 &lt;code&gt;GO111MODULE=off&lt;/code&gt; にしないとgo getできなかったり、いざdocker-composeで &lt;code&gt;realize start --run&lt;/code&gt; しようとすると下記のようなエラーが出たりと色々あれだったので、他に使えそうなパッケージが無いか探してみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Electron の CORS ブロックを回避する方法について</title>
      <link>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</link>
      <pubDate>Sat, 06 Jun 2020 11:59:01 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</guid>
      <description>&lt;h2 id=&#34;electron-で-cors-エラー&#34;&gt;Electron で CORS エラー&lt;/h2&gt;
&lt;p&gt;Electron の Render プロセスでクロスオリジンのリクエストを投げた際、通常の Web と同様 CORS エラーでブロックされます。通信先が自前の API サーバだったりした場合にはそちらの設定で&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;を許可すれば OK です。&lt;/p&gt;
&lt;p&gt;この制約はセキュリティ上必要なものですが、どうしてもクロスオリジンのリクエストを投げたい場合もあるかと思います。私の場合は、ある markdow エディタに、貼り付けた URL から自動的にページのタイトルを fetch して挿入する機能を実装するときに遭遇しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust で Webassembly を書いて、Typescript で React を書くための環境構築</title>
      <link>https://www.zeroclock.dev/posts/2020/05/rust-webassembly-react-ts/</link>
      <pubDate>Thu, 28 May 2020 07:55:17 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/rust-webassembly-react-ts/</guid>
      <description>&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;p&gt;この記事では、Rust(cargo)と npm は導入済みを前提としています。
知識的には&lt;a href=&#34;https://rustwasm.github.io/docs/book/&#34;&gt;Rust の公式 WebAssembly チュートリアル&lt;/a&gt;を一通り読んだくらいで、今回は Wasm と React どう組み合わせるのよってところを重点的に。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>画像の diff を生成する rust ライブラリを書いた</title>
      <link>https://www.zeroclock.dev/posts/2020/05/image-diff-rust-crate/</link>
      <pubDate>Mon, 25 May 2020 23:48:26 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/image-diff-rust-crate/</guid>
      <description>&lt;h2 id=&#34;rust-で画像の比較画像を生成&#34;&gt;Rust で画像の比較画像を生成&lt;/h2&gt;
&lt;p&gt;個人的に今取り組んでいるプロジェクトで、画像の差分を取得する必要があったのですが、いまいちそれっぽいライブラリが見つかりませんでした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/lcs-image-diff&#34;&gt;lcs-image-diff&lt;/a&gt;もありましたが、ちょっとイメージと違う。&lt;/p&gt;
&lt;p&gt;イメージ的にはこう、差分があるピクセルだけピンポイントで検出してほしい。&lt;/p&gt;
&lt;p&gt;元画像を比較画像で減算して、その後元画像を加算する感じかな。&lt;/p&gt;
&lt;h2 id=&#34;ライブラリ作成&#34;&gt;ライブラリ作成&lt;/h2&gt;
&lt;p&gt;ということで、ライブラリを作成しました。依存ライブラリとして画像処理ライブラリの&lt;a href=&#34;https://crates.io/crates/image&#34;&gt;image&lt;/a&gt;を使用しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Storybook に noarmalize.css を適用する</title>
      <link>https://www.zeroclock.dev/posts/2020/05/import-normalize-css-to-storybook/</link>
      <pubDate>Thu, 14 May 2020 22:40:11 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/import-normalize-css-to-storybook/</guid>
      <description>Storybook に normalize.css を適用する .storybook/config.jsに下記の通り import 文を記述します。
import &amp;#39;!style-loader!css-loader!sass-loader!../src/styles/normalize.css&amp;#39;; 現場からは以上です！！</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.zeroclock.dev/about/</link>
      <pubDate>Sun, 10 May 2020 14:24:25 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/about/</guid>
      <description>個人的な開発メモを書いていきます。</description>
    </item>
    
    <item>
      <title>Emacs で deno のコード補完を有効化する</title>
      <link>https://www.zeroclock.dev/posts/2020/05/enable-deno-autocompletion-emacs/</link>
      <pubDate>Sun, 10 May 2020 12:30:33 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/enable-deno-autocompletion-emacs/</guid>
      <description>&lt;h2 id=&#34;emacs-で-deno&#34;&gt;Emacs で Deno&lt;/h2&gt;
&lt;p&gt;最近 Rust で色々 CLI ツールを作って遊んでいるのですが、そのつながりで Rust で書かれた javascript ランタイムである&lt;a href=&#34;https://github.com/denoland/deno&#34;&gt;Deno&lt;/a&gt;の Getting started をちまちまやっていました。&lt;/p&gt;
&lt;p&gt;言語は Typescript なので Emacs の&lt;a href=&#34;https://github.com/ananthakumaran/tide&#34;&gt;Tide&lt;/a&gt;でコード自動補完を有効化していたのですが、Deno での import 方法が対応していません。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;serve&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://deno.land/std@v0.42.0/http/server.ts&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// ↑ここで [An import path cannot end with a &amp;#39;. ts&amp;#39;extension.]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// もちろんインポートしたモジュールの自動補完も不可。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tsconfigts-の編集で解決&#34;&gt;tsconfig.ts の編集で解決&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>