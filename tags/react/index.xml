<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on VIVOLOG</title>
    <link>https://www.zeroclock.dev/tags/react/</link>
    <description>Recent content in React on VIVOLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2020 zeroclock</copyright>
    <lastBuildDate>Sun, 06 Jun 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://www.zeroclock.dev/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typescriptを使用したサーバレスWebsocketチャットサーバーの構築</title>
      <link>https://www.zeroclock.dev/posts/2021/06/websocket-chat-server-with-serverless/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2021/06/websocket-chat-server-with-serverless/</guid>
      <description>チャットサーバーの見積もり相談で、Websocket使った場合の実装を整理したので、メモっておきます。
動作確認 以下のURLで動作確認できます。
https://reactplayground.zeroclock.dev/WebsocketChat
  複数タブで開く   Sign Upでユーザ登録＆ログイン   お互いのIDを教え合う   チャットする   片方が切断すれば、きちんとステータスも変わります   上記以外にも、切断後に再度ログインして相手IDを入力して再接続すると、過去のメッセージもきちんと再現してくれます（メッセージ情報の永続化）。
構成図 今回は、サーバレス（Lambda）でチャットサーバーを構築することを検討してみました。
 Figure 1: 概要図
  API GatewayがWebsocketのフロントエンドとして機能し、リクエストに応じて各バックエンド(handlers)にリクエストを流します。
処理フロー ちょっと図だとわかりにくいので、Websocketに絞った処理の流れを下記に示します。
  [Client -&amp;gt; Server] Websocket通信確立リクエスト送信（with アクセストークン） [Server] Authorizer においてトークンの検証処理実行 [Client &amp;lt;- Server] 200 OK [Client -&amp;gt; Server] $connect request [Server] handleSocketConnect において、DynamoDBに接続情報を登録し、通信相手がすでにONLINEの場合は、ステータス更新情報を WebSocket経由で 送信 [Client &amp;lt;- Server] 200 OK [Client -&amp;gt; Server] GETMSG request [Server] getMsg において、DynamoDBから該当するconnectionに紐づくメッセージ情報を取得し、 WebSocket経由で 送信 [Client &amp;lt;- Server] 200 OK &amp;hellip;   Websocketはイベント駆動なので、 GETMSG のリクエストを送信しても、 そのレスポンスとしてメッセージ情報が返却されるわけではない ことに注意が必要です。</description>
    </item>
    
    <item>
      <title>Electron の CORS ブロックを回避する方法について</title>
      <link>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</link>
      <pubDate>Sat, 06 Jun 2020 11:59:01 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</guid>
      <description>&lt;h2 id=&#34;electron-で-cors-エラー&#34;&gt;Electron で CORS エラー&lt;/h2&gt;
&lt;p&gt;Electron の Render プロセスでクロスオリジンのリクエストを投げた際、通常の Web と同様 CORS エラーでブロックされます。通信先が自前の API サーバだったりした場合にはそちらの設定で&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;を許可すれば OK です。&lt;/p&gt;
&lt;p&gt;この制約はセキュリティ上必要なものですが、どうしてもクロスオリジンのリクエストを投げたい場合もあるかと思います。私の場合は、ある markdow エディタに、貼り付けた URL から自動的にページのタイトルを fetch して挿入する機能を実装するときに遭遇しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust で Webassembly を書いて、Typescript で React を書くための環境構築</title>
      <link>https://www.zeroclock.dev/posts/2020/05/rust-webassembly-react-ts/</link>
      <pubDate>Thu, 28 May 2020 07:55:17 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/rust-webassembly-react-ts/</guid>
      <description>&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;p&gt;この記事では、Rust(cargo)と npm は導入済みを前提としています。
知識的には&lt;a href=&#34;https://rustwasm.github.io/docs/book/&#34;&gt;Rust の公式 WebAssembly チュートリアル&lt;/a&gt;を一通り読んだくらいで、今回は Wasm と React どう組み合わせるのよってところを重点的に。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>画像の diff を生成する rust ライブラリを書いた</title>
      <link>https://www.zeroclock.dev/posts/2020/05/image-diff-rust-crate/</link>
      <pubDate>Mon, 25 May 2020 23:48:26 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/image-diff-rust-crate/</guid>
      <description>&lt;h2 id=&#34;rust-で画像の比較画像を生成&#34;&gt;Rust で画像の比較画像を生成&lt;/h2&gt;
&lt;p&gt;個人的に今取り組んでいるプロジェクトで、画像の差分を取得する必要があったのですが、いまいちそれっぽいライブラリが見つかりませんでした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/lcs-image-diff&#34;&gt;lcs-image-diff&lt;/a&gt;もありましたが、ちょっとイメージと違う。&lt;/p&gt;
&lt;p&gt;イメージ的にはこう、差分があるピクセルだけピンポイントで検出してほしい。&lt;/p&gt;
&lt;p&gt;元画像を比較画像で減算して、その後元画像を加算する感じかな。&lt;/p&gt;
&lt;h2 id=&#34;ライブラリ作成&#34;&gt;ライブラリ作成&lt;/h2&gt;
&lt;p&gt;ということで、ライブラリを作成しました。依存ライブラリとして画像処理ライブラリの&lt;a href=&#34;https://crates.io/crates/image&#34;&gt;image&lt;/a&gt;を使用しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Storybook に noarmalize.css を適用する</title>
      <link>https://www.zeroclock.dev/posts/2020/05/import-normalize-css-to-storybook/</link>
      <pubDate>Thu, 14 May 2020 22:40:11 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/import-normalize-css-to-storybook/</guid>
      <description>Storybook に normalize.css を適用する .storybook/config.jsに下記の通り import 文を記述します。
import &amp;#39;!style-loader!css-loader!sass-loader!../src/styles/normalize.css&amp;#39;; 現場からは以上です！！</description>
    </item>
    
    <item>
      <title>はじめてのOSS contribute</title>
      <link>https://www.zeroclock.dev/posts/2020/02/first-oss-contribute/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/02/first-oss-contribute/</guid>
      <description>&lt;p&gt;最近、長らく使っていたエンジニア向けノートアプリ「Boostnote」がリニューアルされた。それによってリポジトリも新しくなったみたいで、ソースコードもほぼ別物になったっぽい。実際に使ってみると色々バグも多くて、これはプルリクチャンスか？と思い、解決できるissueが無いか探してみた。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
