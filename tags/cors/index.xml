<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CORS on VIVOLOG</title>
    <link>https://www.zeroclock.dev/tags/cors/</link>
    <description>Recent content in CORS on VIVOLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2020 zeroclock</copyright>
    <lastBuildDate>Sat, 06 Jun 2020 11:59:01 +0900</lastBuildDate><atom:link href="https://www.zeroclock.dev/tags/cors/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Electron の CORS ブロックを回避する方法について</title>
      <link>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</link>
      <pubDate>Sat, 06 Jun 2020 11:59:01 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</guid>
      <description>&lt;h2 id=&#34;electron-で-cors-エラー&#34;&gt;Electron で CORS エラー&lt;/h2&gt;
&lt;p&gt;Electron の Render プロセスでクロスオリジンのリクエストを投げた際、通常の Web と同様 CORS エラーでブロックされます。通信先が自前の API サーバだったりした場合にはそちらの設定で&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;を許可すれば OK です。&lt;/p&gt;
&lt;p&gt;この制約はセキュリティ上必要なものですが、どうしてもクロスオリジンのリクエストを投げたい場合もあるかと思います。私の場合は、ある markdow エディタに、貼り付けた URL から自動的にページのタイトルを fetch して挿入する機能を実装するときに遭遇しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CORS対応】Lambdaで動くLaravelの静的ファイルをCloudFrontで配信する</title>
      <link>https://www.zeroclock.dev/posts/2019/09/lambda-static-via-cloudfront/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/09/lambda-static-via-cloudfront/</guid>
      <description>&lt;h2 id=&#34;静的ファイルをキャッシュしたい&#34;&gt;&lt;strong&gt;静的ファイルをキャッシュしたい&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;前回の記事ではLambda上にLaravelを構築しました。&lt;/p&gt;
&lt;p&gt;とりあえず動くは動くんですが、Lambda上で全てのファイルをいちいち読み込んでいるので、容量が大きいファイルをやりとりするサービスではパフォーマンス面で不安が残ります。&lt;/p&gt;
&lt;p&gt;そのため、今回の記事では静的ファイル（publicフォルダ配下）をS3に配置し、Cloudfrontで高速に配信できるようにしたいと思います。また、キャッシュサーバから受信したCSS等から別サーバのリソースを読み込むことを考慮し、CORS設定も行っていきたいと思います。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
