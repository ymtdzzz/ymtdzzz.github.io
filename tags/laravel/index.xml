<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laravel on VIVOLOG</title>
    <link>https://www.zeroclock.dev/tags/laravel/</link>
    <description>Recent content in Laravel on VIVOLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2020 zeroclock</copyright>
    <lastBuildDate>Mon, 24 May 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://www.zeroclock.dev/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Serverless,ECS（Fargate）自動デプロイ環境の構築</title>
      <link>https://www.zeroclock.dev/posts/2021/05/auto-deploy-with-terraform-serverless/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2021/05/auto-deploy-with-terraform-serverless/</guid>
      <description>&lt;p&gt;デプロイを自動化するのがMustになりつつありますが、なかなか完璧な自動デプロイ環境を作るのは難しいなーと感じています。&lt;/p&gt;
&lt;p&gt;で、最近、所属会社の経営層へのプレゼンのネタとして、中途半端にデプロイ自動化しているプロジェクトを、全リソース自動デプロイ化したら面白いんじゃね？という点で色々検証してみましたので、それについての記事になります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS CodeDeployのHookスクリプトでソースを弄りたいとき</title>
      <link>https://www.zeroclock.dev/posts/2020/02/codedeploy-hook-script/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/02/codedeploy-hook-script/</guid>
      <description>&lt;h2 id=&#34;hookスクリプトの実行場所&#34;&gt;Hookスクリプトの実行場所&lt;/h2&gt;
&lt;p&gt;CodeDeployでソースをデプロイするときには、appspec.ymlでソースと実行するHookスクリプトを指定する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CORS対応】Lambdaで動くLaravelの静的ファイルをCloudFrontで配信する</title>
      <link>https://www.zeroclock.dev/posts/2019/09/lambda-static-via-cloudfront/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/09/lambda-static-via-cloudfront/</guid>
      <description>&lt;h2 id=&#34;静的ファイルをキャッシュしたい&#34;&gt;&lt;strong&gt;静的ファイルをキャッシュしたい&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;前回の記事ではLambda上にLaravelを構築しました。&lt;/p&gt;
&lt;p&gt;とりあえず動くは動くんですが、Lambda上で全てのファイルをいちいち読み込んでいるので、容量が大きいファイルをやりとりするサービスではパフォーマンス面で不安が残ります。&lt;/p&gt;
&lt;p&gt;そのため、今回の記事では静的ファイル（publicフォルダ配下）をS3に配置し、Cloudfrontで高速に配信できるようにしたいと思います。また、キャッシュサーバから受信したCSS等から別サーバのリソースを読み込むことを考慮し、CORS設定も行っていきたいと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LambdaでLaravelを動かす(SAM使用)</title>
      <link>https://www.zeroclock.dev/posts/2019/09/laravel-on-lambda/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2019/09/laravel-on-lambda/</guid>
      <description>&lt;h2 id=&#34;laravel-in-lambda&#34;&gt;&lt;strong&gt;Laravel in Lambda&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;最近Lambda環境でLaravelを動かす機会がありました。&lt;/p&gt;
&lt;p&gt;LaravelはPHPのフレームワークなので、基本的にはPHP用のカスタムランタイムを適用してソースファイルをまるごとアップロードすれば動きます。&lt;/p&gt;
&lt;p&gt;ただ、手動でzipで固めてアップロードして…というのもなんかあれなので、今回はCloudformationの拡張であるServerless Application Model(SAM)を使用してデプロイまでやってみたいと思います。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
