<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on VIVOLOG</title>
    <link>https://www.zeroclock.dev/tags/typescript/</link>
    <description>Recent content in typescript on VIVOLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2020 zeroclock</copyright>
    <lastBuildDate>Sun, 06 Jun 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://www.zeroclock.dev/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typescriptを使用したサーバレスWebsocketチャットサーバーの構築</title>
      <link>https://www.zeroclock.dev/posts/2021/06/websocket-chat-server-with-serverless/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2021/06/websocket-chat-server-with-serverless/</guid>
      <description>&lt;p&gt;チャットサーバーの見積もり相談で、Websocket使った場合の実装を整理したので、メモっておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Typescript】axiosのレスポンスはきちんと型チェックしよう</title>
      <link>https://www.zeroclock.dev/posts/2020/08/type-checking-the-response-via-axios/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/08/type-checking-the-response-via-axios/</guid>
      <description>&lt;h2 id=&#34;axiosでエラー&#34;&gt;Axiosでエラー&lt;/h2&gt;
&lt;p&gt;Axiosで外部APIを叩いてデータを取得したいと思い、下記のコードを書いたとします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Electron の CORS ブロックを回避する方法について</title>
      <link>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</link>
      <pubDate>Sat, 06 Jun 2020 11:59:01 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/06/electron-avoid-cors-error/</guid>
      <description>&lt;h2 id=&#34;electron-で-cors-エラー&#34;&gt;Electron で CORS エラー&lt;/h2&gt;
&lt;p&gt;Electron の Render プロセスでクロスオリジンのリクエストを投げた際、通常の Web と同様 CORS エラーでブロックされます。通信先が自前の API サーバだったりした場合にはそちらの設定で&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;を許可すれば OK です。&lt;/p&gt;
&lt;p&gt;この制約はセキュリティ上必要なものですが、どうしてもクロスオリジンのリクエストを投げたい場合もあるかと思います。私の場合は、ある markdow エディタに、貼り付けた URL から自動的にページのタイトルを fetch して挿入する機能を実装するときに遭遇しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust で Webassembly を書いて、Typescript で React を書くための環境構築</title>
      <link>https://www.zeroclock.dev/posts/2020/05/rust-webassembly-react-ts/</link>
      <pubDate>Thu, 28 May 2020 07:55:17 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/rust-webassembly-react-ts/</guid>
      <description>&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;p&gt;この記事では、Rust(cargo)と npm は導入済みを前提としています。
知識的には&lt;a href=&#34;https://rustwasm.github.io/docs/book/&#34;&gt;Rust の公式 WebAssembly チュートリアル&lt;/a&gt;を一通り読んだくらいで、今回は Wasm と React どう組み合わせるのよってところを重点的に。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs で deno のコード補完を有効化する</title>
      <link>https://www.zeroclock.dev/posts/2020/05/enable-deno-autocompletion-emacs/</link>
      <pubDate>Sun, 10 May 2020 12:30:33 +0900</pubDate>
      
      <guid>https://www.zeroclock.dev/posts/2020/05/enable-deno-autocompletion-emacs/</guid>
      <description>&lt;h2 id=&#34;emacs-で-deno&#34;&gt;Emacs で Deno&lt;/h2&gt;
&lt;p&gt;最近 Rust で色々 CLI ツールを作って遊んでいるのですが、そのつながりで Rust で書かれた javascript ランタイムである&lt;a href=&#34;https://github.com/denoland/deno&#34;&gt;Deno&lt;/a&gt;の Getting started をちまちまやっていました。&lt;/p&gt;
&lt;p&gt;言語は Typescript なので Emacs の&lt;a href=&#34;https://github.com/ananthakumaran/tide&#34;&gt;Tide&lt;/a&gt;でコード自動補完を有効化していたのですが、Deno での import 方法が対応していません。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;serve&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://deno.land/std@v0.42.0/http/server.ts&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// ↑ここで [An import path cannot end with a &amp;#39;. ts&amp;#39;extension.]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// もちろんインポートしたモジュールの自動補完も不可。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tsconfigts-の編集で解決&#34;&gt;tsconfig.ts の編集で解決&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>
